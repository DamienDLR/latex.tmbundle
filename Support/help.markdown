# A Short Guide to the Mysteries of the LaTeX Bundle

## Intro

The LaTeX Bundle has a long history, it was one of the earliest contributed bundles in the TextMate family. Many people have contributed to this bundle over the short life of TextMate. Those people are documented in the credits section based on the now defunct history file and what can be gleaned from the subversion logs and mailing list. Since there are several ways to use the LaTeX bundle and several different distributions of TeX out there for the Mac now seems like as good a time as any to document some of the prerequisites and options.

First, you need a working version of LaTeX. Some of the commands in the bundle assume that you are using the latest version that you can get using the [i-installer][1] package. You should use the 2005 install package from Gerben's i-Directory.

Several of the commands also assume that you have some kind of pdf previewer. There are four options:

  1. The HTML output window of TextMate 
  2. The [TeXShop][2] Application
  3. The [TeXniscope][3] previewer
  4. Apple's Preview.app

Some of the previewers, TeXniscope and TeXShop work with the pdfsync package. The pdfsync package is great because it allows you to easily hop back and forth between TextMate and the pdf version of your document

The LaTeX bundle also works well with bibtex. In particular the [Bibdesk][4] application for managing bibliography files works well with TextMate.

Spell Checking: The system spell check service works find with LaTeX but is a bit annoying since it will mark all the various LaTeX commands as misspelled. However, you can install [CocoAspell][5] which works as another system dictionary and is able to filter out LaTeX commands.

_**Note** since 1.1b12 (or around that time), spell checking should no longer be applied to LaTeX reserved keywords. There still is a problem with spell checking in math environments (because the constructs there aren't always marked up as an entity for which spell checking is disabled)._

You can find all of the above on Version Tracker and the like.

The rest of this document is broken into six sections. There is a section for each of the following: [Commands](#commands), [Macros][7], [Drag and Drop Commands][8], [Snippets][9], [Templates][10], [Environment Variables][11], [Related Commands][12] from other bundles, and [Credits][13]. Happy LaTeXing!

## Commands

* Typeset & View `⌘R`

    typeset the current project to a temporary directory and display LaTeX output in the TextMate HTML output window (requires PDF Browser Plugin or Tiger (?) to display the resulting PDF) The typeset document will appear using your preferred viewer. If you are a TeXniscope user you can configure TextMate to be your external editor in the prefs panel for TeXniscope. You should set the options as follows (assumes you have mate installed, see Help → Terminal Usage… if you haven't):  

		Editor: mate
		Editor options: %file -l %line

	If you are using TeXniscope you can make use of the pdfsync package by inserting `\usepackage{pdfsync}` in you LaTeX document. This allows you to quickly navigate back and forth between the source and the preview window. Command-clicking in the preview window brings you to the correct line in your source file. 

* LaTeX Tidy `⇧⌥⌘L`

    Reformats your LaTeX code to be neat and tidy.

* Trash aux Files `^⌥⌫`

    Clean up your directory by removing all the auxiliary files generated by Latex

* Insert Label from Document... `^⌥⎋`

    Popup a dialog box with the list of defined labels to select from. Selecting a label inserts it at the cursor. This is a nice way to quickly find a label to use with a `\ref`. It is deprecated in favor of the following, more powerful, command.

* Enhanced Insert Label from Document... `⌥⎋`

    Popup a dialog box with the list of defined labels to select from. It searches for labels in the current document, as well as in the document pointed to by `TM_LATEX_MASTER`, and in any documents recursively included in those two via `\include` and `\input` commands.

* Find in TeXniscope `^⌥⌘O`

    Again, if you are using the pdfsync package this command will bring you to the preview window where the current line of source is displayed.

* BibDesk completion `⌥⎋`

    Searches in open bibliography files for the current word and replaces the current word with the appropriate cite key.

* Bibliography completion `⌥⎋`

    Searches in the current document and in the document pointed to by `TM_LATEX_MASTER`, and looks recursively for bib files included via the `\bibliography` command in those documents, as well as any documents included in those via `\include` and `\input` commands. It further searches in the file pointed to by `TM_LATEX_BIB`. It searches for the current word/selection in the author/editor, citekey and title fields, or shows a list of all citekeys if there is no current word.

* Insert Command Based on Current Word `^⌘}`

    This allows you to complete many common latex commands such as `\textit{}`, `\textbf{}`, `\ref{}`, etc. This command can now be customized by the user through environment variables, defined via the Advanced Tab in the Preferences. There are two relevant variables: `TM_LATEX_SHORTCUTS` and `TM_LATEX_COMMAND_NOBRACES`. See the [Environment Variables][11] section for more details. This command currently supports by default the following shortcut words: `bf`, `cha`, `cli`, `dc`, `ds`, `em`, `fc`, `fn`, `fr`, `it`, `l`, `sc`, `sec`, `sf`, `ssub`, `sub`, `tt`, `un`. It behaves intelligently for the words: `put`, `multiput`, `line`, `circle`, `frac`, `uncover`.

* Insert Environment Based on Current Word `^⌘{`

    This allows you to quickly create any kind of begin/end environment such as itemize, equation, verbatim, etc. This command can now be customized by the user through environment variables, defined via the Advanced Tab in the Preferences. There are three relevant variables: `TM_LATEX_SHORTCUTS`, `TM_LATEX_FIRSTLINE` and `TM_LATEX_ZEROLINE`. See the [Environment Variables][11] section for more details. This command currently supports by default the following shortcut words: item, enum, desc, doc, eqa, eqn, eq, thm, lem, cor, pro, def, pf, que, q, p, par, lst, fig, pic, fr, cols, col, bl. It behaves intelligently for the environments: enumerate, description, itemize, questions, parts, figure, equation, eqnarray, columns, theorem, corollary, lemma, proof, proposition, definition, lstlisting, picture, column, frame, block, table.

* Insert Item based on Current Environment `⌤`

    Inserts `\item` when in an itemize or enumerate environment, `\part` when in a parts environment, `\question` when in a questions environment etc. Also adds overlay specifications in Beamer (i.e. `\item<+->`).

* Insert Environment Closer `⌥⌘.`

    Locates the innermost `\begin{foo}` that hasn't been closed by a corresponding `\end{foo}` and inserts this closing part.

* Expand to Greek Letter `⌃⇧G`

    Expands the current word to an appropriate greek letter, e.g. 'a' becomes `\alpha`, 'b' becomes `\beta`, 'vf' becomes `\varphi` etc.

* Create Table `⌃⇧⌘T`

    Creates the basic structure for a tabular environment, with number of rows and columns either as the current selection, or in the absence of current selection provided via a dialog.

* Help

	Brings up this very helpful page.

* Run BibTeX

* Run Makeindex

## Macros

* Generic Completion `^⌘␣`

    _This command, and the scripts accompanying it, are no longer part of the bundle. They have been deleted, and replaced by other commands._

	<span style="text-decoration: line-through;">This macro actually consists of a bunch of perl scripts that get run to do completion on bib entries, cross-refs and commands. It is context sensitive and makes its best guess based on context as to what you are trying to accomplish.</span>

* Convert Selection to Table `⌃⇧⌘T`

* Convert ASCII Symbol to LaTeX Command `⌃⇧S`

* Add Word to Index `⌃⇧I`

* Make Current Word TT `⌃⇧C`

## Drag and Drop Commands

There are two drag and drop thingies that work well in LaTeX. You can drag an image file in to the document and have it surrounded by by a complete figure environment. You can also drag in another .tex file to have that file added to your document with an `\include` command.

## Snippets

Many of the snippets that used to exist in the LaTeX bundle have been made obsolete by simpler commands such as the Insert Begin/End pair. 

  * Table [Table]
  * Figure [Fig]
  * Code listing (lstlisting) [lst]
  * Code listing inline (lstinline) [li]
  * Wrap Selection in Command `⌃⇧W`: Makes it easy to wrap the selected text with `\textbf`, `\textit`, or `\texttt`
  * section, subsection, et. al. [sec, sub, ssub]
  * Wrap in Left Right () `⌃⇧L`
  * Lines to List Environment `⌃⇧L`: Wrap the selected group of lines inside a list environment(enumerate,itemize,description). Each non-blank line becomes an `\item` in the environment. If the first 20 characters of the line contain a : it is assumed that the environment will be a description environment and all the characters up to the : are placed inside left/right brackets.

* Beamer Frames [frame] Make a begin/end frame if you are using Beamer...
* Here is a list of existing snippets that could also be replaced by the use of completion and the Begin/end pair command
_Most of these have now been replaced by the "Insert Command..." command._

  * `\textit` [it]
  * `\textbf` [bf]
  * `\texttt` [tt]
  * `\emph` [em]
  * `\frac` [fr]
  * `\item` [enter]
  * `\item` for description [itd]
  * `\footnote` [foot]
  * `\cite` [cite]
  * `\ref` [ref]

## Completions

The following words are known to be in the list of completions (accessed through ⎋) that LaTeX knows about:

  * corollary
  * definition
  * description
  * enumerate
  * equation
  * itemize
  * lemma
  * proof
  * proposition
  * verbatim

## Templates

Article
    Sets up a single file article document. Includes lots of nice packages for graphics, math, code listings, table of contents, etc.
Exam
    Sets up a single file exam document. If you write exams in LaTeX this is the template for you. Includes lots of nice packages for graphics, math, code listings, table of contents, etc.
## Environment Variables

* `TM_LATEX_MASTER`

	If set this variable contains the filename of a LaTeX file that includes other LaTeX files to create a larger work. If not set, this variable defaults to `TM_FILEPATH`

* `TM_TSCOPE`

	If set this variable contains the path to the TeXniscope application. If not set it defaults to `/Applications`

* `PDFTEX_FILE_LOCATION`

	<strike>The PDF LaTeX command currently needs to go through http to display the PDF inline. This is done by copying the file to a place where apache can find it and redirecting to that file using `http://localhost/`. It defaults to `~/Sites`</strike>

* `PDFTEX_WEB_LOCATION`

	<strike>This is how the generated PDF should be accessed (see `PDFTEX_FILE_LOCATION`). It defaults to `http://localhost/~$USER`</strike>

* `TM_LATEX_ERRLVL`

	Set this to the error level you still want to be able to see: 

	* **2**: If a document was successfully built, it will jump directly to the preview.
	* **1**: If there are any warnings, these are shown, together with a link to the preview.
	* **0**: Halt on any errors or warnings, a link to the preview is only included if the document was built.

The default value is **2**. If the document could not be built, then the error messages are always shown. 

* `TM_LATEX_COMPILER`

	There are two main values for this command pdflatex or `latexmk.pl`. pdflatex runs the normal pdflatex command against the current file, or `TM_LATEX_MASTER` sending the output of one pass to the html output window. `latexmk.pl` is essentially like ant (or make) for latex. It will run pdflatex, bibtex, and/or makeindex as many times as needed to get a clean pdf file free from missing references, bibliography entries or index entries.

* `TM_LATEX_VIEWER`

	Possible values for this are: “html” (default), “texniscope”, “preview”. See advanced notes on using Texniscope above.

* `TM_LATEX_INSERT_LABEL`

	If you want the automatically generated begin/end environments to contain a label then you should set this to 1.

* `TM_LATEX_SHORTCUTS`

	This is used by the "Insert Environment..." and "Insert Command..." commands to perform expansion before processing the current word. It is supposed to be a comma separated list of pairs of the form `short=>long` where "short" is the shortcut, and "long" is its expansion. So for instance if this variable has the value "`item=>itemize,enum=>enumerate`", then executing the command with current word "item" will produce an itemize environment. Note: Some shortcuts are already performed by the command, e.g. `it=>textit`

* `TM_LATEX_COMMAND_NOBRACES`

	This is a regular expression used by the "Insert Command..." command to decide whether to place braces at the end of the expanded command or not. The default behavior is to add them, unless the word matches this regexp. Note: Some commands are already implemented, e.g. `displaystyle`.

* `TM_LATEX_FIRSTLINE`

	This is used by the "Insert Environment..." command to insert extra information in the line right below the `\begin{word}` line. It has syntax similar to the `TM_LATEX_SHORTCUTS` syntax. For example, if this variable is set to "`enumerate=>\\item ,theorem=>\\label{thm:$1}\n\t`", then enumerate environments get a starting "`\item `", while theorem environments get a label. Note: Most standard environments are already set up.

* `TM_LATEX_ZEROLINE`

	This is used by the "Insert Environment..." command to insert extra information immediately to the right of `\begin{word}`. It has syntax similar to the `TM_LATEX_SHORTCUTS` syntax. For example, if this variable is set to "`theorem=>\\label{thm:$1}`", then theorem environments get a label right next to `\begin{theorem}`. Note: Most standard environments are already set up.

## Related Commands

* Toggle Comment `⌘/` (Source bundle)

    The Toggle Comment command toggles line comments for selected lines of text.

## Credits

There were at least two or possibly three versions of a LaTeX bundle floating around in the early days of TextMate by (I think): Normand Mousseau, Gaetan Le Guelvouit and Andrew Ellis At some point, January 2005, Eric Hsu pulled together the threads into one package. From then on there have been contributions by Sune Foldager, Brad Miller, Allan Odgaard, Jeroen van der Ham, and Haris Skiadas. The Generic Completion package was written by Marcin. 

## TODO

  * Once the new Syntax and Scope system is in place it would be good to rethink some of the keyboard shortcuts.

[1]: http://ii2.sourceforge.net/
[2]: http://www.uoregon.edu/~koch/texshop/
[3]: http://www.ing.unipi.it/~d9615/homepage/texniscope.html
[4]: http://bibdesk.sourceforge.net/
[5]: http://people.ict.usc.edu/~leuski/cocoaspell/home.html
[6]: #commands
[7]: #macros
[8]: #draganddropcommands
[9]: #snippets
[10]: #templates
[11]: #environmentvariables
[12]: #relatedcommands
[13]: #credits
