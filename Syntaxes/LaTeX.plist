<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>tex</string>
	</array>
	<key>firstLineMatch</key>
	<string>^\\documentclass.*</string>
	<key>foldingStartMarker</key>
	<string>\\begin\{.*\}</string>
	<key>foldingStopMarker</key>
	<string>\\end\{.*\}</string>
	<key>keyEquivalent</key>
	<string>~^L</string>
	<key>name</key>
	<string>LaTeX</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>\$\$</string>
			<key>end</key>
			<string>\$\$</string>
			<key>name</key>
			<string>string.other.math.block.latex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[\[\]\{\}]</string>
			<key>name</key>
			<string>keyword.operator.braces.latex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\\\</string>
			<key>name</key>
			<string>keyword.operator.newline.latex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>((\\(?:(?:sub)*section|chapter|paragraph|part))(\*?)(?:(\[)[^\[]*?(\]))??(\{))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.section.latex</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>this works OK with all kinds of crazy stuff as long as section is one line</string>
			<key>contentName</key>
			<string>entity.name.section</string>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.section.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.tex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\begin\{)(lstlisting)(\})(\[(.*)\])?</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Put the lstlisting match before the more general environment listing. Someday it would be nice to make this rule general enough to figure out which language is inside the lstlisting environment rather than my own personal use for python. --Brad</string>
			<key>end</key>
			<string>(\\end\{)(lstlisting)(\})</string>
			<key>name</key>
			<string>source.python.embedded.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.python</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(\\begin\{)(verbatim)(\})</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(\\end\{)(verbatim)(\})</string>
			<key>name</key>
			<string>meta.verbatim.latex</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>These two patterns match the \begin{document} and \end{document} commands, so that the environment matching pattern following them will ignore those commands.</string>
			<key>match</key>
			<string>(\\begin\{)(document)(\})</string>
			<key>name</key>
			<string>meta.begin-document.latex</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.function.latex</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\end\{)(document)(\})</string>
			<key>name</key>
			<string>meta.end-document.latex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\begin\{)(\w+[*]?)(\})</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.be.latex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.function.be.latex</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>support.function.be.latex</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.latex</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>support.function.be.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\\end\{)(\2)(\})</string>
			<key>name</key>
			<string>meta.environment.list.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\textit\{)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.textit.latex</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>We put the keyword in a capture and name this capture, so that disabling spell checking for “keyword” won't be inherited by the argument to \textit{...}.

Put specific matches for particular LaTeX keyword.functions before the last two more general functions</string>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.textit.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^}]+</string>
					<key>name</key>
					<string>markup.italic.textit.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\textbf\{)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.textbf.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.textbf.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^}]+</string>
					<key>name</key>
					<string>markup.bold.textbf.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\texttt\{)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.texttt.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.texttt.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^}]+</string>
					<key>name</key>
					<string>markup.other.raw.texttt.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\item)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.latex.item</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.scope.item.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\cite(al)?[tp]?\*?(\[[^\]]*\]){,2}\{)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.cite.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.cite.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\w+</string>
					<key>name</key>
					<string>variable.parameter.cite.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\\(?:ref|eqref|label)\{)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.ref-or-label.latex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>name</key>
			<string>meta.ref-or-label.latex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[a-zA-Z,:0-9]+</string>
					<key>name</key>
					<string>variable.parameter.ref-or-latex.latex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.latex.verb</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.latex.verb</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>markup.other.raw.latex</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.latex.verb</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\verb[\*]?)(\S)(.*?)(\2|$)</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>``</string>
			<key>end</key>
			<string>''</string>
			<key>name</key>
			<string>string.quoted.single.latex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\\\(</string>
			<key>end</key>
			<string>\\\)</string>
			<key>name</key>
			<string>string.other.math.latex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\\\[</string>
			<key>end</key>
			<string>\\\]</string>
			<key>name</key>
			<string>string.other.math.latex</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Not sure if this is the proper classification. This is a catch-all for \&lt;symbol&gt; so that e.g. \" doesn't start an (invalid) string</string>
			<key>match</key>
			<string>\\[^A-Za-z\n]</string>
			<key>name</key>
			<string>constant.character.escape.latex</string>
		</dict>
		<dict>
			<key>include</key>
			<string>source.tex</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>text.latex</string>
	<key>uuid</key>
	<string>3BEEA00C-6B1D-11D9-B8AD-000D93589AF6</string>
</dict>
</plist>
